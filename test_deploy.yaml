---
- hosts: localhost
  vars:
    ansible_connection: local
    ansible_python_interpreter: /usr/bin/python3

  tasks:
  
    - name: Create tosca directory if it does not exist
      file:
        path: /tmp/tosca
        state: directory
        
    - find:
        paths: /tmp/tosca/
        patterns: "deploy_id"
        age: 3d
      register: older_files

    - file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ older_files.files }}"
       

    - name: deploy
      get_url:
        timeout: 2400
        validate_certs: no
        url: "{{baseUrl}}/deployer/deploy/{{provision_id}}"
        headers:
          accept: "text/plain"
        url_username: "{{ sdia_user }}"
        url_password: "{{ sdia_password }}"
        force_basic_auth: yes
        force: yes
        dest: /tmp/tosca/deploy_id_{{random_name}}
      ignore_errors: yes
      register: get_url_output
        
    - set_stats:
        data:
          body: "Deploy Failed. {{get_url_output}}"
      when: get_url_output.status_code != 200

    - name: Deploy Failed.
      fail:
        msg: "Deploy Failed. {{get_url_output}}"
      when: get_url_output.status_code != 200
      

    - lineinfile:
        path: /tmp/tosca/deploy_id_{{random_name}}
        line: '{"id":'
        insertbefore: BOF

    - lineinfile:
        path: /tmp/tosca/deploy_id_{{random_name}}
        line: '}'


    - include_vars:
        file: /tmp/tosca/deploy_id_{{random_name}}
        name: deploy_id

    - debug:
        var: deploy_id    
          
          
    - name: get deploy tosca
      get_url:
        timeout: 2400
        validate_certs: no
        url: "{{baseUrl}}/tosca_template/{{deploy_id.id}}"
        headers:
          accept: "text/plain"
        url_username: "{{ sdia_user }}"
        url_password: "{{ sdia_password }}"
        force_basic_auth: yes
        force: yes
        dest: /tmp/tosca/{{random_name}}_deployment.yaml


    - include_vars:
        file: /tmp/tosca/{{random_name}}_deployment.yaml
        name: deployment
        
    - set_stats:
        data: "{{ deployment }}"
        
    - set_fact:
        services_list: "{{ deployment['topology_template']['node_templates']['kubernetes']['attributes']['services'] }}"
      when: "'kubernetes' in deployment['topology_template']['node_templates']"
      
    - set_fact:
        urls: "{{ deployment['topology_template']['node_templates']['tic']['attributes']['services'] }}"
      when: "'tic' in deployment['topology_template']['node_templates']"
      
        
    - set_fact:
        info: []
        
    - set_fact:
        info: "{{ info + [item] }}"
      loop: "{{ services_list}}"
      when: "'kubernetes' in deployment['topology_template']['node_templates']"
      
    - set_fact:
        urls: []
      when: "'kubernetes' in deployment['topology_template']['node_templates']"
        
    - name: set urls
      set_fact:
        urls: "{{ urls + [item] }}"
      loop: "{{ info|map(attribute='info')|flatten }}"
      when: "'kubernetes' in deployment['topology_template']['node_templates']"
             
    - wait_for:
        host: "{{item['url'].split('://')[1].split(':')[0]}}"
        port: "{{item['url'].split('://')[1].split(':')[1]}}"
        state: started
        delay: 10
      loop: "{{ urls }}"   
      when: "'kubernetes' in deployment['topology_template']['node_templates']"
      
      
    - wait_for:
        host: "{{item.split('://')[1].split(':')[0]}}"
        port: "{{item.split('://')[1].split(':')[1]}}"
        state: started
        delay: 10
      loop: "{{ urls }}"   
      when: "'tic' in deployment['topology_template']['node_templates']"

#     - set_stats:
#         data:
#           image_name: "{{ deployment['topology_template']['node_templates']['kaniko']['interfaces']['install_chart']['inputs']['values']['destination'] }}"
#         when: "'kaniko' in deployment['topology_template']['node_templates']"
        
        

    - set_stats:
        data:
          deployment_id: "{{deploy_id.id }}"
        
